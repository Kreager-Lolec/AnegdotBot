import random
import datetime
from datetime import *
import psycopg2
import Constant_File

mydb = psycopg2.connect(Constant_File.DB_URI, sslmode='require')


def CreateTable():
    mycursor = mydb.cursor()
    mycursor.execute('''
        CREATE TABLE IF NOT EXISTS CHATS (
            ChatId BIGINT PRIMARY KEY,
            CountUsers BIGINT ); ''')
    mydb.commit()
    mycursor.execute(''' 
        CREATE TABLE IF NOT EXISTS CATEGORIES (
            CaterogyId INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            CategoryNameDisplay VARCHAR(255) NOT NULL,
            CategoryNameLogical VARCHAR(255) NOT NULL,
            UserNameAdded VARCHAR(255) NOT NULL,
            TimeAdded VARCHAR(255) NOT NULL
        );
                   ''')
    mydb.commit()
    mycursor.execute('''
            CREATE TABLE IF NOT EXISTS ANEGDOTS (
                AnegdotId INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                AnegdotDisplay VARCHAR(510) NOT NULL,
                AnegdotLogical VARCHAR(510) NOT NULL,
                CategoryNameDisplay VARCHAR(255) NOT NULL,
                CategoryNameLogical VARCHAR(255) NOT NULL,
                UserNameAdded VARCHAR(255) NOT NULL,
                TimeAdded VARCHAR(255) NOT NULL
        );
                       ''')
    mydb.commit()
    mycursor.execute('''
            CREATE TABLE IF NOT EXISTS ROLES_ADMIN (
                RoleId INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                RoleName VARCHAR(255) NOT NULL,
                ListAdmins VARCHAR(255) NOT NULL,
                ListRights VARCHAR(255) NOT NULL
        );
                       ''')
    insertRoles()
    mycursor.execute('''
            CREATE TABLE IF NOT EXISTS ADMINS (
                AdminId INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                AdminUserName VARCHAR(255) NOT NULL
        );
                       ''')
    mydb.commit()
    listadmin = ['mihailik_panchuk', 'kreager', 'Barik_superman']
    # listAdminId = ['156911032','256266717','399228453']
    for row in listadmin:
        mycursor.execute(f'''INSERT INTO ADMINS (AdminUserName)
        SELECT N'{row}'
        WHERE
            NOT EXISTS (SELECT * FROM ADMINS WHERE AdminUserName = N'{row}' ) ''')
        mydb.commit()
    # Insert INTO CREATE TABLE IF YOU NEED THIS
    # CaterogyId INTEGER,
    # CONSTRAINT FK_AnegdotCatehogy1 FOREIGN KEY (CaterogyId) REFERENCES CATEGORIES(CaterogyId)
    mycursor.close()


def insertRoles():
    listadmin = ['mihailik_panchuk;', 'kreager;', 'Barik_superman;']
    roleName = ['Юнлінг', 'Падаван', 'Лицар-джедай', 'гранд-майстер Ордена джедаїв']
    listRights = ['gettxtanegdot', 'gettxtadmins', 'addcategory', 'addanegdot', 'deleteanegdot', 'deletecategory',
                  'controladmin', 'inserttxtanegdottodb', 'inserttxtadminstodb']
    listUnlingRights = listRights[2] + ";" + listRights[3]
    listPadavanRights = listUnlingRights + ";" + listRights[4] + ";" + listRights[5]
    listJediKnightRights = listRights[0] + ";" + listRights[1] + ";" + listPadavanRights
    listGrandMasterRights = listJediKnightRights + ";" + listRights[6] + ";" + listRights[7] + ";" + listRights[
        8]
    mycursor = mydb.cursor()
    mycursor.execute(f'''INSERT INTO ROLES_ADMIN (roleName, listAdmins, Listrights)
    SELECT N'{roleName[0]}', '', N'{listUnlingRights}'
    WHERE
        NOT EXISTS (SELECT * FROM ROLES_ADMIN WHERE roleName = N'{roleName[0]}' ) ''')
    mydb.commit()
    mycursor.execute(f'''INSERT INTO ROLES_ADMIN (roleName, listAdmins, Listrights)
    SELECT N'{roleName[1]}', N'{listadmin[2]}', N'{listPadavanRights}'
    WHERE
        NOT EXISTS (SELECT * FROM ROLES_ADMIN WHERE roleName = N'{roleName[1]}' ) ''')
    mydb.commit()
    mycursor.execute(f'''INSERT INTO ROLES_ADMIN (roleName, listAdmins, Listrights)
    SELECT N'{roleName[2]}', N'{listadmin[0]}', N'{listJediKnightRights}'
    WHERE
        NOT EXISTS (SELECT * FROM ROLES_ADMIN WHERE roleName = N'{roleName[2]}' ) ''')
    mydb.commit()
    mycursor.execute(f'''INSERT INTO ROLES_ADMIN (roleName, listAdmins, Listrights)
    SELECT N'{roleName[3]}', N'{listadmin[1]}', N'{listGrandMasterRights}'
    WHERE
        NOT EXISTS (SELECT * FROM ROLES_ADMIN WHERE roleName = N'{roleName[3]}' ) ''')
    mydb.commit()
    mycursor.close()


def addAdminToDb(userName):
    mycursor = mydb.cursor()
    mycursor.execute(f'''INSERT INTO ADMINS (AdminUserName)
    SELECT N'{userName}'
    WHERE
        NOT EXISTS (SELECT * FROM ADMINS WHERE AdminUserName = N'{userName}' ) ''')
    mydb.commit()
    mycursor.close()


def deleteAdmin(userName):
    mycursor = mydb.cursor()
    mycursor.execute(f'''DELETE FROM ADMINS WHERE AdminUserName = N'{userName}' ''')
    mydb.commit()
    mycursor.close()


def addAdminRole(adminUserName,role):
    mycursor = mydb.cursor()
    expression = getAdminListByRole(role) + adminUserName + ";"
    mycursor.execute(f'''UPDATE ROLES_ADMIN
    SET listAdmins = N'{expression}'
    WHERE roleName = N'{role}' ''')
    mydb.commit()
    mycursor.close()


def removeAdminRole(adminUserName,role):
    mycursor = mydb.cursor()
    listAdminds = getAdminListByRole(role)
    listAdminds = listAdminds.replace(adminUserName + ";", "")
    mycursor.execute(f'''UPDATE ROLES_ADMIN
    SET listAdmins = N'{listAdminds}'
    WHERE roleName = N'{role}' ''')
    mydb.commit()
    mycursor.close()


def getAdminListByRole(role):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT listAdmins FROM ROLES_ADMIN WHERE roleName = N'{role}' ''')
    info = mycursor.fetchone()[0]
    print("Admin: " + info)
    return info


def checkIfAdminHaveRole(adminUserName,role):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT listAdmins FROM ROLES_ADMIN WHERE roleName = N'{role}' ''')
    listAdminds = mycursor.fetchone()[0]
    mycursor.execute(f'''SELECT RoleName FROM ROLES_ADMIN WHERE roleName = N'{role}' ''')
    RoleName = mycursor.fetchone()[0]
    # print("Admin: " + listAdminds + " Role: " + RoleName)
    if adminUserName in listAdminds:
        return True
    else:
        return False


def GetRole(adminUserName):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT * FROM ROLES_ADMIN ''')
    info = mycursor.fetchall()
    for row in info:
        if adminUserName in row[2]:
            return row[1]
    return "Ніхуя"


def GetListOfAdmins():
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT * FROM ADMINS ''')
    info = mycursor.fetchall()
    listAdmins = []
    for row in info:
        listAdmins.append(row[1])
    print(listAdmins)
    return listAdmins


def GetAdminRights(adminUserName):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT * FROM ROLES_ADMIN ''')
    info = mycursor.fetchall()
    for row in info:
        if checkIfAdminHaveRole(adminUserName,row[1]):
            # print(row[3])
            return row[3]


def GetRoleAdminsAll():
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT * FROM ROLES_ADMIN ''')
    info = mycursor.fetchall()
    return info


def checkIfAdmin(username):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT COUNT(*) FROM ADMINS WHERE AdminUserName = N'{username}' ''')
    if mycursor.fetchone()[0] == 1:
        return True
    return False


def checkIfExistChats():
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT COUNT(*) FROM CHATS''')
    if mycursor.fetchone()[0] > 0:
        return True
    return False


def GetChatsId():
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT * FROM CHATS''')
    listId = []
    for row in mycursor.fetchall():
        listId.append(row[0])
        print(row[0])
    return listId


def checkIfExistsCategory(categoryLogical):
    category = proccesAnegdotOrCategoryName(categoryLogical)
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT COUNT(*) FROM CATEGORIES WHERE CategoryNameLogical = N'{category}' ''')
    if mycursor.fetchone()[0] == 1:
        return True
    return False


def checkIfExistsAnedgot(categoryLogical, anegdotLogical):
    category = proccesAnegdotOrCategoryName(categoryLogical)
    anegdot = proccesAnegdotOrCategoryName(anegdotLogical)
    mycursor = mydb.cursor()
    mycursor.execute(
        f'''SELECT COUNT(*) FROM ANEGDOTS WHERE CategoryNameLogical = N'{category}' AND AnegdotLogical = N'{anegdot}' ''')
    if mycursor.fetchone()[0] == 1:
        return True
    return False


def checkIfExistsAnedgotWithoutCategory(anegdotLogical):
    anegdot = proccesAnegdotOrCategoryName(anegdotLogical)
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT COUNT(*) FROM ANEGDOTS WHERE AnegdotLogical = N'{anegdot}' ''')
    if mycursor.fetchone()[0] == 1:
        return True
    return False


def checkIfNotExistAnedgots():
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT COUNT(*) FROM ANEGDOTS''')
    if mycursor.fetchone()[0] == 0:
        return True
    return False


def checkIfNotExistCategories():
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT COUNT(*) FROM CATEGORIES''')
    if mycursor.fetchone()[0] == 0:
        return True
    return False


def checkIfNotExistAnedgotsByCategory(categoryLogical):
    category = proccesAnegdotOrCategoryName(categoryLogical)
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT COUNT(*) FROM ANEGDOTS WHERE CategoryNameLogical = N'{category}' ''')
    if mycursor.fetchone()[0] == 0:
        return True
    return False


def addCategory(message):
    categoryNameDisplay = str(message.text).strip(" ")
    categoryNameLogical = proccesAnegdotOrCategoryName(categoryNameDisplay)
    userName = message.from_user.username
    time = datetime.now()
    time = str(time.strftime("%H:%M:%S %d-%m-%y"))
    mycursor = mydb.cursor()
    mycursor.execute(f'''INSERT INTO CATEGORIES (CategoryNameDisplay, CategoryNameLogical, UserNameAdded, TimeAdded)
    SELECT N'{categoryNameDisplay}', N'{categoryNameLogical}', N'{userName}', N'{time}'
    WHERE
        NOT EXISTS (SELECT * FROM CATEGORIES WHERE CategoryNameLogical = N'{categoryNameLogical}') ''')
    mydb.commit()
    mycursor.close()


def addCategoryUsingTxt(category,userName,time):
    categoryNameDisplay = str(category).strip(" ")
    categoryNameLogical = proccesAnegdotOrCategoryName(categoryNameDisplay)
    mycursor = mydb.cursor()
    mycursor.execute(f'''INSERT INTO CATEGORIES (CategoryNameDisplay, CategoryNameLogical, UserNameAdded, TimeAdded)
    SELECT N'{categoryNameDisplay}', N'{categoryNameLogical}', N'{userName}', N'{time}'
    WHERE
        NOT EXISTS (SELECT * FROM CATEGORIES WHERE CategoryNameLogical = N'{categoryNameLogical}') ''')
    mydb.commit()
    mycursor.close()


def addAnegdotToDb(message, category):
    categoryNameDisplay = category.strip(" ")
    categoryNameLogical = proccesAnegdotOrCategoryName(categoryNameDisplay)
    anegdotDisplay = str(message.text).strip(" ")
    anegdotLogical = proccesAnegdotOrCategoryName(anegdotDisplay)
    userName = message.from_user.username
    time = datetime.now()
    time = str(time.strftime("%H:%M:%S %d-%m-%y"))
    mycursor = mydb.cursor()
    mycursor.execute(f'''INSERT INTO ANEGDOTS (AnegdotDisplay,AnegdotLogical,CategoryNameDisplay,CategoryNameLogical,UserNameAdded,TimeAdded)
    SELECT N'{anegdotDisplay}',N'{anegdotLogical}', N'{categoryNameDisplay}', N'{categoryNameLogical}', N'{userName}', N'{time}'
    WHERE
        NOT EXISTS (SELECT * FROM ANEGDOTS WHERE CategoryNameLogical = N'{categoryNameLogical}' AND AnegdotLogical = N'{anegdotLogical}')''')
    mydb.commit()
    mycursor.close()


def addAnegdotToDbUsingTxt(anegdot, category, userName, time):
    categoryNameDisplay = category.strip(" ")
    categoryNameLogical = proccesAnegdotOrCategoryName(categoryNameDisplay)
    anegdotDisplay = anegdot.strip(" ")
    anegdotLogical = proccesAnegdotOrCategoryName(anegdotDisplay)
    mycursor = mydb.cursor()
    mycursor.execute(f'''INSERT INTO ANEGDOTS (AnegdotDisplay,AnegdotLogical,CategoryNameDisplay,CategoryNameLogical,UserNameAdded,TimeAdded)
    SELECT N'{anegdotDisplay}',N'{anegdotLogical}', N'{categoryNameDisplay}', N'{categoryNameLogical}', N'{userName}', N'{time}'
    WHERE
        NOT EXISTS (SELECT * FROM ANEGDOTS WHERE CategoryNameLogical = N'{categoryNameLogical}' AND AnegdotLogical = N'{anegdotLogical}')''')
    mydb.commit()
    mycursor.close()


def removeAnegdotFromDb(anegdot):
    anegdotLogical = proccesAnegdotOrCategoryName(str(anegdot))
    mycursor = mydb.cursor()
    mycursor.execute(f''' DELETE FROM ANEGDOTS WHERE AnegdotLogical = N'{anegdotLogical}' ''')
    mydb.commit()
    mycursor.close()


def AddChat(message):
    mycursor = mydb.cursor()
    mycursor.execute(f'''INSERT INTO CHATS (ChatId)
    SELECT {message.chat.id}
    WHERE
        NOT EXISTS (SELECT * FROM CHATS WHERE ChatId = {message.chat.id} ) ''')
    mydb.commit()
    mycursor.close()


def getCategories():
    mycursor = mydb.cursor()
    mycursor.execute('''SELECT * FROM CATEGORIES''')
    info = mycursor.fetchall()
    listCategories = []
    for row in info:
        listCategories.append(row[1])
    print(listCategories)
    return listCategories


def getFullInfoCategories():
    mycursor = mydb.cursor()
    mycursor.execute('''SELECT * FROM CATEGORIES''')
    info = mycursor.fetchall()
    return info


def getAnegdot():
    mycursor = mydb.cursor()
    mycursor.execute('''SELECT * FROM ANEGDOTS''')
    info = mycursor.fetchall()
    listAnegdots = []
    for row in info:
        listAnegdots.append(row[1])
    print(listAnegdots)
    anegdot = random.choice(listAnegdots)
    return anegdot


def getRandomAnegdotByCategory(categoryname):
    categoryNameLogical = proccesAnegdotOrCategoryName(categoryname)
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT * FROM ANEGDOTS WHERE CategoryNameLogical = N'{categoryNameLogical}' ''')
    info = mycursor.fetchall()
    listAnegdots = []
    for row in info:
        listAnegdots.append(row[1])
    print(listAnegdots)
    anegdot = random.choice(listAnegdots)
    return anegdot


def getAnegdotsByCategory(categoryname):
    categoryNameLogical = proccesAnegdotOrCategoryName(categoryname)
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT * FROM ANEGDOTS WHERE CategoryNameLogical = N'{categoryNameLogical}' ''')
    info = mycursor.fetchall()
    listAnegdots = []
    for row in info:
        listAnegdots.append(row[1])
    print(listAnegdots)
    return listAnegdots


def getFullInfoAnegdotsByCategory(categoryname):
    categoryNameLogical = proccesAnegdotOrCategoryName(categoryname)
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT * FROM ANEGDOTS WHERE CategoryNameLogical = N'{categoryNameLogical}' ''')
    info = mycursor.fetchall()
    return info


def deleteCategory(category):
    categoryNameLogical = proccesAnegdotOrCategoryName(category)
    mycursor = mydb.cursor()
    mycursor.execute(f"DELETE FROM CATEGORIES WHERE CategoryNameLogical = N'{categoryNameLogical}' ")
    mydb.commit()
    mycursor.close()


def deleteAnegdotsByCategory(category):
    categoryNameLogical = proccesAnegdotOrCategoryName(category)
    print(category)
    mycursor = mydb.cursor()
    mycursor.execute(f"DELETE FROM ANEGDOTS WHERE CategoryNameLogical = N'{categoryNameLogical}' ")
    mydb.commit()
    mycursor.close()


def deleteNoneAnegdots():
    mycursor = mydb.cursor()
    mycursor.execute(f"DELETE FROM ANEGDOTS WHERE AnegdotDisplay = 'None' ")
    mydb.commit()
    mycursor.close()


def DeleteChat(chat_id):
    mycursor = mydb.cursor()
    mycursor.execute(f"DELETE FROM CHATS WHERE ChatId = '{chat_id}' ")
    mydb.commit()
    mycursor.close()


def deleteExactlyAnegdots():
    mycursor = mydb.cursor()
    mycursor.execute(f"DELETE FROM ANEGDOTS WHERE AnegdotDisplay = '- Аргументуй.\n- Чим?\n- Аргументом.' ")
    mydb.commit()
    mycursor.close()


def deleteExactlyCategories():
    mycursor = mydb.cursor()
    mycursor.execute(f"DELETE FROM CATEGORIES WHERE CategoryNameDisplay = '12345678901234567890123456789012345678901234567890123456' ")
    mydb.commit()
    mycursor.close()


def proccesAnegdotOrCategoryName(name):
    completeName = str(name).strip(" ")
    completeName = completeName.lower()
    return completeName


def DropTable():
    mycursor = mydb.cursor()
    mycursor.execute('''DROP TABLE ANEGDOTS''')
    mycursor.execute('''DROP TABLE CATEGORIES''')
    # mycursor.execute('''DROP TABLE ADMINS''')
    # mycursor.execute('''DROP TABLE ROLES_ADMIN''')
    mydb.commit()
    mycursor.close()